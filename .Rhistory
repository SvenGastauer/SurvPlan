#get spacing
#getspace()
ts = values$space
ts=ts%>%filter(ts$Spacing!=-1)
#get polygon defs
tdef = values$pols
#empty df for results
allt=data.frame()
#loop through all polygons in spacing
#ts=ts[1:3,]
message('Looping through strata...')
progress <- shiny::Progress$new()
# Make sure it closes when we exit this reactive, even if there's an error
on.exit(progress$close())
progress$set(message = "Computing Transects...", value = 0)
#ts$Stratum = as.numeric(ts$StratumPlan)
for(i in 1:nrow(ts)){
print(ts[i,])
# if(i>1){
#   if(as.numeric(ts$StratumPlan)[i] == as.numeric(ts$StratumPlan)[i-1]){
#     next}
# }
sel=ts$Stratum[i]
sel2 = as.numeric(ts$Stratum[ts$StratumPlan == sel])
if(length(sel2)<1){next}
tdef$Stratum[tdef$Stratum %in% sel2] = sel
ts$Spacing = as.numeric(ts$Spacing)
spacing = ts%>%filter(Stratum==sel)%>%select(Spacing) * 1000 %>% as.numeric() * 1.852
spacing = as.numeric(spacing)
psel=as.numeric(sel)
progress$inc(1/nrow(ts), detail = paste("Processing", sel, '-', i, 'of', nrow(ts)))
message('Processing Stratum ',psel)
poly=tdef%>%filter(Stratum == psel)
orient=as.numeric(ts$Orientation[i])
if(abs(orient)>=90){
axrot='y'
mult = ifelse(orient < abs(orient),-1,1)
orient = mult * (abs(orient) - 90)
}else{
axrot='x'
}
tl = get_surv(poly=poly,spacing=spacing, Stratum=psel, orient=orient, axrot=axrot, mode=ts$Mode[i])
allt=rbind(allt, tl)
}
values$allt = allt
})
output$getTrans <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(values$allt, file, row.names = FALSE)
}
)
}
runApp(list(ui=ui,server=server), launch.browser=TRUE)
library(shiny)
library(leaflet)
library(DT)
library(ggplot2)
source('./R/helper.R')
source('./R/plot_trans.R')
allt=NULL
ui <- fluidPage(
titlePanel("Thünen Transect Planner"),
fluidRow(column(3,fileInput("polfn", "Choose Polygon CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"))),
column(3,fileInput("spacefn", "Choose Spacing CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"))),
column(3,actionButton("cmptr", "Compute Transects")),
column(3,downloadButton("getTrans", "Download Transects"))),
hr(),
h3('Map'),
br(),
leafletOutput("survmap", width = "70%", height = 800),
p(),
br(),
h3('Transect Spacing Table'),
dataTableOutput('tsp')
)
server <- function(input, output, session) {
values <- shiny::reactiveValues()
if(exists("values$allt") == F){values$allt=NULL} #transects
if(exists("values$pols") == F){values$pols=NULL} # polygon definitions
if(exists("values$space") == F){values$space=NULL} #spacings and orientation
##################################################
# POLYGONS
##################################################
#get polygons / strata from csv
getpols <- reactive({
req(input$polfn)
message('Adding polygons')
read.csv(input$polfn$datapath)
})
#create polygons / strata
polmap<- reactive({
values$pols = getpols()
tdef = values$pols
strata=SpatialPolygons(
lapply(unique(tdef$Stratum),
FUN=function(x)
Polygons(list(Polygon(tdef%>%
filter(Stratum==x)%>%
select('Lon','Lat'))),ID=x)),
proj4string=CRS(paste0("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")))
message('Created Polygon projection')
strata
})
#create polygon map
output$survmap <- renderLeaflet({
pols <- polmap()
tdef = values$pols
if(is.null(tdef)==F){
popup=paste0('Stratum: ', unique(tdef$Stratum))
}
map = leaflet() %>%
addProviderTiles(providers$Esri.OceanBasemap)
#addProviderTiles(providers$Stamen.TonerLite,
#                 options = providerTileOptions(noWrap = TRUE)
#)
if(is.null(pols) == F){
map =map%>%
addPolygons(data=pols,popup=popup, layerId = unique(tdef$Stratum))
}
allt = values$allt
if(is.null(allt)==FALSE){
allsp = lapply(unique(allt$Stratum),
FUN=function(x)
SpatialLines(
list(
Lines(
list(
Line(
allt[allt$Stratum==x,1:2])),
x))))
for(i in seq(1,length(allsp))){
map=map%>%addPolylines(data=allsp[[i]], col='black', opacity=1, weight=1)
}
}
message('Generated Map')
map
})
observeEvent(input$survmap_shape_click, { # update the location selectInput on map clicks
p <- input$survmap_shape_click
print(p)
})
observe({
event <- input$survMap_shape_click
if (is.null(event))
return()
print(event)
})
###############################################################
# SPACINGS
##############################################################
#get spacings / strata from csv
getspace <- reactive({
req(input$spacefn)
tmp = read.csv(input$spacefn$datapath)
if('StratumPlan' %in% names(tmp) == F){
tmp$StratumPlan = tmp$Stratum
}
if('Orientation' %in% names(tmp) ==F){
tmp$Orientation = 0
}
if('Mode' %in% names(tmp) ==F){
tmp$Mode = 'Parallel'
}
if(is.null(values$pols) == F){
tmp = left_join(tmp,data.frame(Stratum=unique(values$pols$Stratum)))
tmp$Orientation[is.na(tmp$Orientation)] = -1
}
values$space = tmp
output$tsp =renderDataTable(values$space, server=FALSE,
rownames= FALSE,
editable='cell',
extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
message('Adding Spacing Information')
})
output$tsp = reactive({
getspace()
#print(values$space)
renderDataTable(values$space,
rownames= FALSE,
server=FALSE,
editable='cell',
extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
})
observeEvent(input$tsp_cell_edit, {
message(Sys.time(), "Editing: ", input$tsp_cell_edit$col)
values$space[input$tsp_cell_edit$row,input$tsp_cell_edit$col+1] <<- input$tsp_cell_edit$value
})
###################################################################
# COMPUTE TRANSECTS
###################################################################
observeEvent(input$cmptr, {
#get spacing
#getspace()
ts = values$space
ts=ts%>%filter(ts$Spacing!=-1)
#get polygon defs
tdef = values$pols
#empty df for results
allt=data.frame()
#loop through all polygons in spacing
#ts=ts[1:3,]
message('Looping through strata...')
progress <- shiny::Progress$new()
# Make sure it closes when we exit this reactive, even if there's an error
on.exit(progress$close())
progress$set(message = "Computing Transects...", value = 0)
#ts$Stratum = as.numeric(ts$StratumPlan)
for(i in 1:nrow(ts)){
print(ts[i,])
# if(i>1){
#   if(as.numeric(ts$StratumPlan)[i] == as.numeric(ts$StratumPlan)[i-1]){
#     next}
# }
sel=ts$Stratum[i]
sel2 = as.numeric(ts$Stratum[ts$StratumPlan == sel])
if(length(sel2)<1){next}
tdef$Stratum[tdef$Stratum %in% sel2] = sel
ts$Spacing = as.numeric(ts$Spacing)
spacing = ts%>%filter(Stratum==sel)%>%select(Spacing) * 1000 %>% as.numeric() * 1.852
spacing = as.numeric(spacing)
psel=as.numeric(sel)
progress$inc(1/nrow(ts), detail = paste("Processing", sel, '-', i, 'of', nrow(ts)))
message('Processing Stratum ',psel)
poly=tdef%>%filter(Stratum == psel)
orient=as.numeric(ts$Orientation[i])
if(abs(orient)>=90){
axrot='y'
mult = ifelse(orient < abs(orient),-1,1)
orient = mult * (abs(orient) - 90)
}else{
axrot='x'
}
tl = get_surv(poly=poly,spacing=spacing, Stratum=psel, orient=orient, axrot=axrot, mode=ts$Mode[i])
allt=rbind(allt, tl)
}
values$allt = allt
})
output$getTrans <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(values$allt, file, row.names = FALSE)
}
)
}
runApp(list(ui=ui,server=server), launch.browser=TRUE)
library(shiny)
library(leaflet)
library(DT)
library(ggplot2)
source('./R/helper.R')
source('./R/plot_trans.R')
allt=NULL
ui <- fluidPage(
titlePanel("Thünen Transect Planner"),
fluidRow(column(3,fileInput("polfn", "Choose Polygon CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"))),
column(3,fileInput("spacefn", "Choose Spacing CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"))),
column(3,actionButton("cmptr", "Compute Transects")),
column(3,downloadButton("getTrans", "Download Transects"))),
hr(),
h3('Map'),
br(),
leafletOutput("survmap", width = "70%", height = 800),
p(),
br(),
h3('Transect Spacing Table'),
dataTableOutput('tsp')
)
server <- function(input, output, session) {
values <- shiny::reactiveValues()
if(exists("values$allt") == F){values$allt=NULL} #transects
if(exists("values$pols") == F){values$pols=NULL} # polygon definitions
if(exists("values$space") == F){values$space=NULL} #spacings and orientation
##################################################
# POLYGONS
##################################################
#get polygons / strata from csv
getpols <- reactive({
req(input$polfn)
message('Adding polygons')
read.csv(input$polfn$datapath)
})
#create polygons / strata
polmap<- reactive({
values$pols = getpols()
tdef = values$pols
strata=SpatialPolygons(
lapply(unique(tdef$Stratum),
FUN=function(x)
Polygons(list(Polygon(tdef%>%
filter(Stratum==x)%>%
select('Lon','Lat'))),ID=x)),
proj4string=CRS(paste0("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")))
message('Created Polygon projection')
strata
})
#create polygon map
output$survmap <- renderLeaflet({
pols <- polmap()
tdef = values$pols
if(is.null(tdef)==F){
popup=paste0('Stratum: ', unique(tdef$Stratum))
}
map = leaflet() %>%
addProviderTiles(providers$Esri.OceanBasemap)
#addProviderTiles(providers$Stamen.TonerLite,
#                 options = providerTileOptions(noWrap = TRUE)
#)
if(is.null(pols) == F){
map =map%>%
addPolygons(data=pols,popup=popup, layerId = unique(tdef$Stratum))
}
allt = values$allt
if(is.null(allt)==FALSE){
allsp = lapply(unique(allt$Stratum),
FUN=function(x)
SpatialLines(
list(
Lines(
list(
Line(
allt[allt$Stratum==x,1:2])),
x))))
for(i in seq(1,length(allsp))){
map=map%>%addPolylines(data=allsp[[i]], col='black', opacity=1, weight=1)
}
}
message('Generated Map')
map
})
observeEvent(input$survmap_shape_click, { # update the location selectInput on map clicks
p <- input$survmap_shape_click
print(p)
})
observe({
event <- input$survMap_shape_click
if (is.null(event))
return()
print(event)
})
###############################################################
# SPACINGS
##############################################################
#get spacings / strata from csv
getspace <- reactive({
req(input$spacefn)
tmp = read.csv(input$spacefn$datapath)
if('StratumPlan' %in% names(tmp) == F){
tmp$StratumPlan = tmp$Stratum
}
if('Orientation' %in% names(tmp) ==F){
tmp$Orientation = 0
}
if('Mode' %in% names(tmp) ==F){
tmp$Mode = 'Parallel'
}
if(is.null(values$pols) == F){
tmp = left_join(tmp,data.frame(Stratum=unique(values$pols$Stratum)))
tmp$Orientation[is.na(tmp$Orientation)] = -1
}
values$space = tmp
output$tsp =renderDataTable(values$space, server=FALSE,
rownames= FALSE,
editable='cell',
extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
message('Adding Spacing Information')
})
output$tsp = reactive({
getspace()
#print(values$space)
renderDataTable(values$space,
rownames= FALSE,
server=FALSE,
editable='cell',
extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
})
observeEvent(input$tsp_cell_edit, {
message(Sys.time(), "Editing: ", input$tsp_cell_edit$col)
values$space[input$tsp_cell_edit$row,input$tsp_cell_edit$col+1] <<- input$tsp_cell_edit$value
})
###################################################################
# COMPUTE TRANSECTS
###################################################################
observeEvent(input$cmptr, {
#get spacing
#getspace()
ts = values$space
ts=ts%>%filter(ts$Spacing!=-1)
#get polygon defs
tdef = values$pols
#empty df for results
allt=data.frame()
#loop through all polygons in spacing
#ts=ts[1:3,]
message('Looping through strata...')
progress <- shiny::Progress$new()
# Make sure it closes when we exit this reactive, even if there's an error
on.exit(progress$close())
progress$set(message = "Computing Transects...", value = 0)
#ts$Stratum = as.numeric(ts$StratumPlan)
for(i in 1:nrow(ts)){
print(ts[i,])
# if(i>1){
#   if(as.numeric(ts$StratumPlan)[i] == as.numeric(ts$StratumPlan)[i-1]){
#     next}
# }
sel=ts$Stratum[i]
sel2 = as.numeric(ts$Stratum[ts$StratumPlan == sel])
if(length(sel2)<1){next}
tdef$Stratum[tdef$Stratum %in% sel2] = sel
ts$Spacing = as.numeric(ts$Spacing)
spacing = ts%>%filter(Stratum==sel)%>%select(Spacing) * 1000 %>% as.numeric() * 1.852
spacing = as.numeric(spacing)
psel=as.numeric(sel)
progress$inc(1/nrow(ts), detail = paste("Processing", sel, '-', i, 'of', nrow(ts)))
message('Processing Stratum ',psel)
poly=tdef%>%filter(Stratum == psel)
orient=as.numeric(ts$Orientation[i])
if(abs(orient)>=90){
axrot='y'
mult = ifelse(orient < abs(orient),-1,1)
orient = mult * (abs(orient) - 90)
}else{
axrot='x'
}
tl = get_surv(poly=poly,spacing=spacing, Stratum=psel, orient=orient, axrot=axrot, mode=ts$Mode[i])
allt=rbind(allt, tl)
}
values$allt = allt
})
output$getTrans <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(values$allt, file, row.names = FALSE)
}
)
}
runApp(list(ui=ui,server=server), launch.browser=TRUE)
devtools::install_github("SvenGastauer/KRMr")
devtools::install_github("/SvenGastauer/KRMr")
devtools::install_github("SvenGastauer/KRMr")
devtools::install_github("SvenGastauer/KRMr")
devtools::install_github("SvenGastauer/KRMr")
devtools::install_github("SvenGastauer/KRMr")
library(KRMr)
?KRMr::besselH
devtools::install_github("SvenGastauer/KRMr", build_vignettes = TRUE)
devtools::install_github("SvenGastauer/KRMr", build_vignettes = TRUE, force=TRUE)
library(KRMr)
browseVignettes('KRMr')
?KRMr::besselH
detach("package:KRMr", unload = TRUE)
library(KRMr)
browseVignettes('KRMr')
?KRMr::besselH
devtools::install_github("SvenGastauer/SurvPlan", build_vignettes = TRUE)
devtools::install_github("SvenGastauer/SurvPlan", build_vignettes = TRUE)
detach("package:KRMr", unload = TRUE)
detach("package:SurvPlan", unload = TRUE)
detach(package:SurvPlan, unload = TRUE)
devtools::install_github("SvenGastauer/SurvPlan", build_vignettes = TRUE)
devtools::install_github("SvenGastauer/SurvPlan", build_vignettes = TRUE)
suppressMessages(invisible(lapply(paste0('package:', names(bspkgs.nbu)), detach, character.only=TRUE,unload=TRUE)))
suppressMessages(invisible(lapply(paste0('package:', names(bspkgs.nbu)), detach, character.only=TRUE,unload=TRUE)bspkgs.nb<-sessionInfo()$basePkgs[sessionInfo()$basePkgs!="base"]
bspkgs.nb<-sessionInfo()$basePkgs[sessionInfo()$basePkgs!="base"]
bspkgs.nbu<-bspkgs.nb[bspkgs.nb!="utils"]
names(bspkgs.nbu)<-bspkgs.nbu
suppressMessages(invisible(lapply(paste0('package:', names(bspkgs.nbu)), detach, character.only=TRUE,unload=TRUE)))
detach("package:methods", unload = TRUE)
detach("package:sp", unload = TRUE)
detach("package:utils", unload = TRUE)
devtools::install_github("SvenGastauer/SurvPlan")
devtools::install_github("SvenGastauer/SurvPlan")
devtools::install_github("SvenGastauer/SurvPlan")
install.packages("htmltools")
devtools::install_github("SvenGastauer/SurvPlan")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
devtools::install_github("SvenGastauer/SurvPlan")
